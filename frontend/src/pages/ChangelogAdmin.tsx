/*
 * @Author: Generated by Codex
 * @Date: 2025-10-14
 * @FilePath: \electron-go-app\frontend\src\pages\ChangelogAdmin.tsx
 */
import {
  FormEvent,
  useEffect,
  useMemo,
  useReducer,
  useRef,
  useState,
} from "react";
import { useTranslation } from "react-i18next";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";
import { GlassCard } from "../components/ui/glass-card";
import { Button } from "../components/ui/button";
import { Input } from "../components/ui/input";
import { Textarea } from "../components/ui/textarea";
import { Badge } from "../components/ui/badge";
import { PageHeader } from "../components/layout/PageHeader";
import { ConfirmDialog } from "../components/ui/confirm-dialog";
import {
  createChangelogEntry,
  deleteChangelogEntry,
  fetchChangelogEntries,
  updateChangelogEntry,
  type ChangelogEntry,
  type ChangelogPayload,
  type ChangelogCreateResult,
} from "../lib/api";
import { useAuth } from "../hooks/useAuth";

interface EditorState {
  id: number | null;
  locale: string;
  badge: string;
  title: string;
  summary: string;
  itemsRaw: string;
  publishedAt: string;
}

const initialEditorState = (locale: string): EditorState => ({
  id: null,
  locale,
  badge: "",
  title: "",
  summary: "",
  itemsRaw: "",
  publishedAt: new Date().toISOString().slice(0, 10),
});

type EditorAction =
  | { type: "reset"; locale: string }
  | { type: "set"; key: keyof EditorState; value: string | number | null }
  | { type: "load"; entry: ChangelogEntry };

function editorReducer(state: EditorState, action: EditorAction): EditorState {
  switch (action.type) {
    case "reset":
      return initialEditorState(action.locale);
    case "set":
      return { ...state, [action.key]: action.value };
    case "load":
      return {
        id: action.entry.id,
        locale: action.entry.locale,
        badge: action.entry.badge,
        title: action.entry.title,
        summary: action.entry.summary,
        itemsRaw: action.entry.items.join("\n"),
        publishedAt: action.entry.published_at.slice(0, 10),
      };
    default:
      return state;
  }
}

export default function ChangelogAdminPage() {
  const { t, i18n } = useTranslation();
  const isAdmin = useAuth((state) => state.profile?.user?.is_admin ?? false);
  const preferredModel =
    useAuth((state) => state.profile?.settings?.preferred_model) ?? "";
  const queryClient = useQueryClient();
  const locale = i18n.language.startsWith("zh") ? "zh-CN" : "en";
  const [editorState, dispatch] = useReducer(
    editorReducer,
    initialEditorState(locale),
  );
  const [autoTranslate, setAutoTranslate] = useState(false);
  const [translateTargets, setTranslateTargets] = useState<string[]>(() =>
    locale === "zh-CN" ? ["en"] : ["zh-CN"],
  );
  const [translationModelKey, setTranslationModelKey] = useState("");
  const [confirmDeleteId, setConfirmDeleteId] = useState<number | null>(null);
  const [isDeleting, setDeleting] = useState<number | null>(null);
  const translationToastId = useRef<string | number | null>(null);

  if (!isAdmin) {
    return (
      <div className="flex flex-col gap-6">
        <PageHeader
          eyebrow={t("logsPage.eyebrow")}
          title={t("nav.changelogAdmin")}
          description={t("logsPage.admin.description")}
        />
        <GlassCard className="flex flex-1 flex-col items-center justify-center gap-3 text-slate-500">
          <span className="text-lg font-semibold text-slate-600">
            {t("logsPage.admin.title")}
          </span>
          <p className="text-sm">{t("ipGuardPage.noPermission.subtitle")}</p>
        </GlassCard>
      </div>
    );
  }

  const availableLocales = useMemo(
    () => [
      { value: "en", label: t("logsPage.admin.localeOption.en") },
      { value: "zh-CN", label: t("logsPage.admin.localeOption.zh-CN") },
    ],
    [t],
  );

  const entriesQuery = useQuery({
    queryKey: ["changelog-admin", locale],
    queryFn: () => fetchChangelogEntries(locale),
    staleTime: 1000 * 60 * 5,
  });

  useEffect(() => {
    dispatch({ type: "reset", locale });
    setAutoTranslate(false);
    setTranslateTargets(locale === "zh-CN" ? ["en"] : ["zh-CN"]);
    setTranslationModelKey(preferredModel || "");
  }, [locale, preferredModel]);

  useEffect(() => {
    setTranslateTargets((prev) => {
      const filtered = prev.filter((target) => target !== editorState.locale);
      if (filtered.length > 0) {
        return filtered;
      }
      const fallback = editorState.locale === "zh-CN" ? "en" : "zh-CN";
      return fallback === editorState.locale ? [] : [fallback];
    });
  }, [editorState.locale]);

  useEffect(() => {
    if (
      autoTranslate &&
      !(translationModelKey || "").trim() &&
      preferredModel
    ) {
      setTranslationModelKey(preferredModel);
    }
  }, [autoTranslate, preferredModel, translationModelKey]);

const createMutation = useMutation<
  ChangelogCreateResult,
  unknown,
  ChangelogPayload
>({
  mutationFn: createChangelogEntry,
  onMutate: () => {
    if (autoTranslate && translationModelKey.trim()) {
      if (translationToastId.current) {
        toast.dismiss(translationToastId.current);
      }
      translationToastId.current = toast.loading(
        t("logsPage.admin.translateLoading", {
          defaultValue: "正在提交并请求翻译...",
        }),
        { duration: Infinity },
      );
    }
  },
  onSuccess: (result) => {
    if (translationToastId.current) {
      toast.dismiss(translationToastId.current);
      translationToastId.current = null;
    }
    const translations = result.translations ?? [];
    if (translations.length > 0) {
      toast.success(
        t("logsPage.admin.successCreateWithTranslations", {
          count: translations.length,
          }),
        );
      } else {
        toast.success(t("logsPage.admin.successCreate"));
      }
      dispatch({ type: "reset", locale });
      setAutoTranslate(false);
      setTranslateTargets(locale === "zh-CN" ? ["en"] : ["zh-CN"]);
      setTranslationModelKey(preferredModel || "");
      void queryClient.invalidateQueries({ queryKey: ["changelog-admin", locale] });
      void queryClient.invalidateQueries({ queryKey: ["changelog", locale] });
    },
    onError: (error: unknown) => {
    if (translationToastId.current) {
      toast.dismiss(translationToastId.current);
      translationToastId.current = null;
    }
      console.error(error);
      toast.error(t("errors.generic"));
    },
  });

const updateMutation = useMutation<
  ChangelogEntry,
  unknown,
  { id: number; payload: ChangelogPayload }
>({
  mutationFn: ({ id, payload }) => updateChangelogEntry(id, payload),
  onMutate: () => {
    if (autoTranslate && translationModelKey.trim()) {
      if (translationToastId.current) {
        toast.dismiss(translationToastId.current);
      }
      translationToastId.current = toast.loading(
        t("logsPage.admin.translateLoading", {
          defaultValue: "正在提交并请求翻译...",
        }),
        { duration: Infinity },
      );
    }
  },
  onSuccess: () => {
    if (translationToastId.current) {
      toast.dismiss(translationToastId.current);
      translationToastId.current = null;
    }
    toast.success(t("logsPage.admin.successUpdate"));
    dispatch({ type: "reset", locale });
    setAutoTranslate(false);
    setTranslateTargets(locale === "zh-CN" ? ["en"] : ["zh-CN"]);
    setTranslationModelKey(preferredModel || "");
      void queryClient.invalidateQueries({ queryKey: ["changelog-admin", locale] });
      void queryClient.invalidateQueries({ queryKey: ["changelog", locale] });
    },
  onError: (error: unknown) => {
    if (translationToastId.current) {
      toast.dismiss(translationToastId.current);
      translationToastId.current = null;
    }
    console.error(error);
    toast.error(t("errors.generic"));
  },
});

  const deleteMutation = useMutation({
    mutationFn: deleteChangelogEntry,
    onSuccess: () => {
      toast.success(t("logsPage.admin.successDelete"));
      void queryClient.invalidateQueries({ queryKey: ["changelog-admin", locale] });
      void queryClient.invalidateQueries({ queryKey: ["changelog", locale] });
    },
    onError: (error: unknown) => {
      console.error(error);
      toast.error(t("errors.generic"));
    },
    onSettled: () => {
      setDeleting(null);
      setConfirmDeleteId(null);
    },
  });

  const entries = entriesQuery.data ?? [];

  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    const items = editorState.itemsRaw
      .split("\n")
      .map((line) => line.trim())
      .filter(Boolean);
    if (items.length === 0) {
      toast.error(t("logsPage.admin.itemsRequired"));
      return;
    }

    const payload: ChangelogPayload = {
      locale: editorState.locale,
      badge: editorState.badge,
      title: editorState.title,
      summary: editorState.summary,
      items,
      published_at: editorState.publishedAt,
    };

    if (autoTranslate) {
      const targets = translateTargets.filter(
        (target) => target !== editorState.locale,
      );
      if (targets.length === 0) {
        toast.error(t("logsPage.admin.translateTargetsRequired"));
        return;
      }
      if (!translationModelKey.trim()) {
        toast.error(t("logsPage.admin.translateModelRequired"));
        return;
      }
      payload.translate_to = targets;
      payload.translation_model_key = translationModelKey.trim();
    }

    if (editorState.id && editorState.id > 0) {
      updateMutation.mutate({ id: editorState.id, payload });
    } else {
      createMutation.mutate(payload);
    }
  };

  const handleDelete = (id: number) => {
    if (deleteMutation.isPending) {
      return;
    }
    setConfirmDeleteId(id);
  };

  const isSubmitting = createMutation.isPending || updateMutation.isPending;

  return (
    <div className="flex flex-col gap-6">
      <PageHeader
        eyebrow={t("logsPage.eyebrow")}
        title={t("nav.changelogAdmin")}
        description={t("logsPage.admin.description")}
      />
      <GlassCard className="space-y-4">
        <form className="space-y-4" onSubmit={handleSubmit}>
          <div className="grid gap-4 md:grid-cols-2">
            <div className="space-y-2">
              <label className="text-xs font-medium text-slate-600 dark:text-slate-300">
                {t("logsPage.admin.locale")}
              </label>
              <select
                className="h-10 w-full rounded-xl border border-white/60 bg-white/80 px-3 text-sm text-slate-700 transition focus:outline-none focus:ring-2 focus:ring-primary dark:border-slate-700 dark:bg-slate-900/70 dark:text-slate-200"
                value={editorState.locale}
                onChange={(event) =>
                  dispatch({
                    type: "set",
                    key: "locale",
                    value: event.target.value,
                  })
                }
              >
                <option value="en">English</option>
                <option value="zh-CN">简体中文</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="text-xs font-medium text-slate-600 dark:text-slate-300">
                {t("logsPage.admin.publishedAt")}
              </label>
              <Input
                value={editorState.publishedAt}
                onChange={(event) =>
                  dispatch({
                    type: "set",
                    key: "publishedAt",
                    value: event.target.value,
                  })
                }
                required
                placeholder="2025-10-12"
              />
            </div>
          </div>
          <div className="grid gap-4 md:grid-cols-2">
            <div className="space-y-2">
              <label className="text-xs font-medium text-slate-600 dark:text-slate-300">
                {t("logsPage.admin.badge")}
              </label>
              <Input
                value={editorState.badge}
                onChange={(event) =>
                  dispatch({
                    type: "set",
                    key: "badge",
                    value: event.target.value,
                  })
                }
                required
              />
            </div>
            <div className="space-y-2">
              <label className="text-xs font-medium text-slate-600 dark:text-slate-300">
                {t("logsPage.admin.titleLabel")}
              </label>
              <Input
                value={editorState.title}
                onChange={(event) =>
                  dispatch({
                    type: "set",
                    key: "title",
                    value: event.target.value,
                  })
                }
                required
              />
            </div>
          </div>
          <div className="space-y-2">
            <label className="text-xs font-medium text-slate-600 dark:text-slate-300">
              {t("logsPage.admin.summary")}
            </label>
            <Textarea
              value={editorState.summary}
              onChange={(event) =>
                dispatch({
                  type: "set",
                  key: "summary",
                  value: event.target.value,
                })
              }
              required
              rows={3}
            />
          </div>
          <div className="space-y-2">
            <label className="text-xs font-medium text-slate-600 dark:text-slate-300">
              {t("logsPage.admin.items")}
            </label>
            <Textarea
              value={editorState.itemsRaw}
              onChange={(event) =>
                dispatch({
                  type: "set",
                  key: "itemsRaw",
                  value: event.target.value,
                })
              }
              placeholder={t("logsPage.admin.itemsHint")}
              required
              rows={6}
            />
          </div>
          <div className="space-y-2 rounded-xl border border-white/60 bg-white/70 p-4 dark:border-slate-700 dark:bg-slate-900/50">
            <div className="flex items-center justify-between">
              <span className="text-xs font-medium text-slate-600 dark:text-slate-300">
                {t("logsPage.admin.translate")}
              </span>
            <Button
              type="button"
              size="sm"
              variant="outline"
              onClick={() =>
                setAutoTranslate((prev) => {
                  const next = !prev;
                  if (
                    next &&
                    !(translationModelKey || "").trim() &&
                    preferredModel
                  ) {
                    setTranslationModelKey(preferredModel);
                  }
                  return next;
                })
              }
            >
              {autoTranslate
                ? t("logsPage.admin.cancel")
                : t("logsPage.admin.translate")}
            </Button>
            </div>
            <p className="text-xs text-slate-500 dark:text-slate-400">
              {t("logsPage.admin.translateDescription")}
            </p>
            {autoTranslate ? (
              <div className="space-y-3 rounded-xl border border-white/60 bg-white/60 p-4 dark:border-slate-700 dark:bg-slate-900/40">
                <div className="space-y-2">
                  <span className="text-xs font-medium text-slate-600 dark:text-slate-300">
                    {t("logsPage.admin.translateTargets")}
                  </span>
                  <div className="flex flex-wrap gap-3">
                    {availableLocales
                      .filter((option) => option.value !== editorState.locale)
                      .map((option) => {
                        const checked = translateTargets.includes(option.value);
                        return (
                          <label
                            key={option.value}
                            className="inline-flex items-center gap-2 rounded-lg border border-white/70 bg-white px-3 py-1 text-xs text-slate-600 transition hover:bg-primary/5 dark:border-slate-700 dark:bg-slate-900/70 dark:text-slate-300"
                          >
                            <input
                              type="checkbox"
                              className="h-4 w-4 rounded border-slate-300 text-primary focus:ring-primary"
                              checked={checked}
                              onChange={() =>
                                setTranslateTargets((prev) =>
                                  checked
                                    ? prev.filter(
                                        (value) => value !== option.value,
                                      )
                                    : [...prev, option.value],
                                )
                              }
                            />
                            {option.label}
                          </label>
                        );
                      })}
                  </div>
                </div>
                <div className="space-y-1">
                  <label className="text-xs font-medium text-slate-600 dark:text-slate-300">
                    {t("logsPage.admin.translateModelKey")}
                  </label>
                  <Input
                    value={translationModelKey}
                    onChange={(event) => setTranslationModelKey(event.target.value)}
                    placeholder="deepseek-chat"
                  />
                  <p className="text-xs text-slate-500 dark:text-slate-400">
                    {t("logsPage.admin.translateModelHint")}
                  </p>
                </div>
              </div>
            ) : null}
          </div>
          <div className="flex flex-wrap gap-3">
            <Button type="submit" disabled={isSubmitting}>
              {editorState.id
                ? t("logsPage.admin.update")
                : t("logsPage.admin.create")}
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={() => {
                dispatch({ type: "reset", locale });
                setAutoTranslate(false);
                setTranslateTargets(locale === "zh-CN" ? ["en"] : ["zh-CN"]);
                setTranslationModelKey(preferredModel || "");
              }}
            >
              {editorState.id
                ? t("logsPage.admin.cancel")
                : t("logsPage.admin.reset")}
            </Button>
          </div>
        </form>
      </GlassCard>
      <GlassCard className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="space-y-1">
            <h2 className="text-lg font-semibold text-slate-900 dark:text-slate-100">
              {t("logsPage.title")}
            </h2>
            <p className="text-sm text-slate-500 dark:text-slate-400">
              {t("logsPage.subtitle")}
            </p>
          </div>
          <Button
            type="button"
            variant="secondary"
            onClick={() => void entriesQuery.refetch()}
            disabled={entriesQuery.isFetching}
          >
            {t("ipGuardPage.actions.refresh")}
          </Button>
        </div>
        <div className="space-y-4">
          {entries.length === 0 ? (
            <p className="text-sm text-slate-500">{t("logsPage.empty")}</p>
          ) : (
            entries.map((entry) => (
              <div
                key={entry.id}
                className="rounded-2xl border border-white/60 bg-white/60 p-5 dark:border-slate-800 dark:bg-slate-900/40"
              >
                <div className="flex items-center justify-between gap-3">
                  <div className="flex flex-1 flex-col gap-2">
                    <Badge className="w-fit rounded-lg border-transparent bg-gradient-to-r from-primary/80 via-primary/70 to-primary/60 px-3 py-0.5 text-[11px] font-semibold text-white shadow-sm">
                      {entry.badge}
                    </Badge>
                    <h3 className="text-lg font-semibold text-slate-800 dark:text-slate-100">
                      {entry.title}
                    </h3>
                  </div>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => dispatch({ type: "load", entry })}
                  >
                    {t("logsPage.admin.edit")}
                  </Button>
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    className="text-rose-500 hover:text-rose-600"
                    onClick={() => handleDelete(entry.id)}
                    disabled={isDeleting === entry.id}
                  >
                    {t("logsPage.admin.delete")}
                  </Button>
                </div>
                <p className="text-sm text-slate-600 dark:text-slate-300">
                  {entry.summary}
                </p>
              </div>
            ))
          )}
        </div>
      </GlassCard>
      <ConfirmDialog
        open={confirmDeleteId != null}
        title={t("logsPage.admin.deleteDialogTitle")}
        description={t("logsPage.admin.confirmDelete")}
        confirmLabel={t("logsPage.admin.delete")}
        cancelLabel={t("common.cancel")}
        loading={deleteMutation.isPending}
        onCancel={() => {
          if (!deleteMutation.isPending) {
            setConfirmDeleteId(null);
          }
        }}
        onConfirm={() => {
          if (confirmDeleteId != null) {
            setDeleting(confirmDeleteId);
            deleteMutation.mutate(confirmDeleteId);
          }
        }}
      />
    </div>
  );
}
