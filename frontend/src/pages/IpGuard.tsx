/*
 * @Author: Generated by Codex
 * @Date: 2025-10-14
 * @FilePath: \electron-go-app\frontend\src\pages\IpGuard.tsx
 */
import { useMemo } from "react";
import { useTranslation } from "react-i18next";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";
import { GlassCard } from "../components/ui/glass-card";
import { Button } from "../components/ui/button";
import { fetchIpGuardBans, removeIpGuardBan, type IpGuardEntry } from "../lib/api";
import { useAuth } from "../hooks/useAuth";

// 管理后台的查询 Key，确保列表与操作保持一致刷新。
const QUERY_KEY = ["ip-guard", "bans"];

export default function IpGuardPage() {
  const { t } = useTranslation();
  const queryClient = useQueryClient();
  const isAdmin = useAuth((state) => state.profile?.user.is_admin ?? false);

  // 未具备管理员身份时直接提示无权限。
  if (!isAdmin) {
    return (
      <div className="flex flex-col gap-6">
        <div className="space-y-1">
          <span className="text-xs uppercase tracking-[0.3em] text-slate-400">
            {t("ipGuardPage.eyebrow")}
          </span>
          <h1 className="text-3xl font-semibold text-slate-800 dark:text-slate-100">
            {t("ipGuardPage.title")}
          </h1>
          <p className="text-sm text-slate-500">{t("ipGuardPage.subtitle")}</p>
        </div>
        <GlassCard className="flex flex-1 flex-col items-center justify-center gap-3 text-slate-500">
          <span className="text-lg font-semibold text-slate-600">
            {t("ipGuardPage.noPermission.title")}
          </span>
          <p className="text-sm">{t("ipGuardPage.noPermission.subtitle")}</p>
        </GlassCard>
      </div>
    );
  }

  const bansQuery = useQuery({
    queryKey: QUERY_KEY,
    queryFn: fetchIpGuardBans,
  });

  const removeMutation = useMutation({
    mutationFn: removeIpGuardBan,
    onSuccess: (_, ip) => {
      toast.success(t("ipGuardPage.toast.unblockSuccess", { ip }));
      void queryClient.invalidateQueries({ queryKey: QUERY_KEY });
    },
    onError: (error) => {
      console.error(error);
      toast.error(t("errors.generic"));
    },
  });

  const entries = useMemo<IpGuardEntry[]>(() => bansQuery.data ?? [], [bansQuery.data]);

  // 格式化过期时间，兼容非法时间字符串兜底返回原值。
  const renderExpiresAt = (value?: string | null) => {
    if (!value) {
      return t("ipGuardPage.row.permanent");
    }
    const parsed = new Date(value);
    if (Number.isNaN(parsed.getTime())) {
      return value;
    }
    return parsed.toLocaleString();
  };

  return (
    <div className="flex flex-col gap-6">
      <div className="space-y-1">
        <span className="text-xs uppercase tracking-[0.3em] text-slate-400">
          {t("ipGuardPage.eyebrow")}
        </span>
        <h1 className="text-3xl font-semibold text-slate-800 dark:text-slate-100">
          {t("ipGuardPage.title")}
        </h1>
        <p className="text-sm text-slate-500">{t("ipGuardPage.subtitle")}</p>
      </div>
      <GlassCard className="flex flex-col">
        <div className="flex items-center justify-between gap-3 border-b border-white/40 pb-4 dark:border-slate-800/60">
          <div className="flex flex-col">
            <span className="text-sm font-medium text-slate-600 dark:text-slate-200">
              {t("ipGuardPage.table.title")}
            </span>
            <span className="text-xs text-slate-400">
              {t("ipGuardPage.table.caption")}
            </span>
          </div>
          <div className="flex items-center gap-2">
            <Button
              type="button"
              variant="secondary"
              onClick={() => bansQuery.refetch()}
              disabled={bansQuery.isLoading || bansQuery.isRefetching}
            >
              {t("ipGuardPage.actions.refresh")}
            </Button>
          </div>
        </div>
        <div className="relative -mx-4">
          <div className="overflow-x-auto px-4">
            <table className="min-w-full divide-y divide-white/30 text-left text-sm">
              <thead className="text-slate-500">
                <tr>
                  <th className="py-3 font-medium">{t("ipGuardPage.columns.ip")}</th>
                  <th className="py-3 font-medium">{t("ipGuardPage.columns.ttl")}</th>
                  <th className="py-3 font-medium">{t("ipGuardPage.columns.expiresAt")}</th>
                  <th className="py-3 font-medium">{t("ipGuardPage.columns.actions")}</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-white/10 text-slate-700 dark:text-slate-200">
                {entries.length === 0 ? (
                  <tr>
                    <td className="py-6 text-center text-sm text-slate-400" colSpan={4}>
                      {bansQuery.isLoading
                        ? t("ipGuardPage.states.loading")
                        : t("ipGuardPage.states.empty")}
                    </td>
                  </tr>
                ) : (
                  entries.map((entry) => (
                    <tr key={entry.ip}>
                      <td className="py-3 font-mono text-xs md:text-sm">{entry.ip}</td>
                      <td className="py-3 text-xs md:text-sm">
                        {t("ipGuardPage.row.ttlSeconds", { value: entry.ttl_seconds })}
                      </td>
                      <td className="py-3 text-xs md:text-sm">{renderExpiresAt(entry.expires_at)}</td>
                      <td className="py-3">
                        <Button
                          type="button"
                          size="sm"
                          variant="ghost"
                          className="text-rose-500 hover:text-rose-600"
                          onClick={() => removeMutation.mutate(entry.ip)}
                          disabled={removeMutation.isPending}
                        >
                          {t("ipGuardPage.actions.unblock")}
                        </Button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>
      </GlassCard>
    </div>
  );
}
